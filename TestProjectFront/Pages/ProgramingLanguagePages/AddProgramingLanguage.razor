@page "/programinglanguage"
@inject IProgramingLanguageService ProgramingService
@inject NavigationManager Navigation

<h3>Create Programing Language</h3>

@if (ErrorMessage != null)
{
	<input type="text" placeholder="@ErrorMessage" readonly="readonly"/>
}

<RadzenTemplateForm Data="@programingLanguageDto" Submit="@((ProgramingLanguageDTO args) => { SubmitAsync(args); })">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Adding Programing Language">
                     <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" @bind-Value="programingLanguageDto.Name" />
                        </div>
                    </div>
	                <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="add_circle_outline" Text="Create" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" Text="Cancel"  style="display: inline-block; margin-left: 10px;" Click="@CancelClick"/>
                        </div>
                    </div>
	            </RadzenFieldset>
            </div>
        </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

	ProgramingLanguageDTO programingLanguageDto = new();

	private void CancelClick()
	{
		Navigation.NavigateTo("/programinglanguages");
	}

    async Task SubmitAsync(ProgramingLanguageDTO arg)
    {
	    try
	    {
		    var result = await ProgramingService.CreateAsync(programingLanguageDto);
		    Navigation.NavigateTo("/programinglanguages");
	    }
	    catch (Exception ex)
	    {
		    ErrorMessage = ex.Message;
	    }
    }
}
