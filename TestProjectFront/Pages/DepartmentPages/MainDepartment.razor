@page "/departments"
@inject IDepartmentService DepartmentService
@inject NavigationManager Navigation

<PageTitle>Departments</PageTitle>

<h3>Departments</h3>

@if (ErrorMessage != null)
{
	<input type="text" placeholder="@ErrorMessage" readonly="readonly"/>
}

<RadzenButton Icon="add_circle_outline" Text="Create" Click="@CreateClick" />
<table class="table table-striped table-bordered bg-light">
	<thead>
	<tr>
		<th>Name</th>
		<th>Floor</th>
		<th></th>
	</tr>
	</thead>
	<tbody>
	@foreach (var department in DepartmentService.Departments)
	{
		<tr>
			<td>@department.Name</td>
			<td>@department.Floor</td>
			<td>
				<RadzenButton Icon="check_circle" ButtonStyle="ButtonStyle.Success" Text="Edit" Click="@((args) => EditClick(department.Id))" />
				<RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@((args) => DeleteAsync(department.Id))" />
			</td>
		</tr>
	}
	</tbody>
</table>

@code {
	[Parameter]
	public string ErrorMessage { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await DepartmentService.GetAllAsync();
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
		}
	}

	private void EditClick(int id)
	{
		Navigation.NavigateTo($"/department/edit/{id}");
	}

	private async Task DeleteAsync(int id)
	{
		try
		{
			DepartmentService.Departments = await DepartmentService.DeleteAsync(id);
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
		}

	}

	private void CreateClick()
	{
		Navigation.NavigateTo("/department");
	}
}