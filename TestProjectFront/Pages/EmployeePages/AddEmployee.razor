@page "/employee"
@inject IEmployeeService EmployeeService
@inject IProgramingLanguageService ProgramingService
@inject IDepartmentService DepartmentService
@inject NavigationManager Navigation

<h3>Add Employee</h3>

@if (ErrorMessage != null)
{
	<input type="text" placeholder="@ErrorMessage" readonly="readonly"/>
}

<RadzenTemplateForm Data="@employeeDto" Submit="@((EmployeeDTO args) => { SubmitAsync(args); })">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Adding Employee">
                     <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" @bind-Value="employeeDto.Name" />
                        </div>
                    </div>
					 <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Surname" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox style="width: 100%;" @bind-Value="employeeDto.Surname" />
                        </div>
                    </div>
	                <div class="row">
		                <div class="col-md-4 align-items-center d-flex">
			                <RadzenLabel Text="Age" />
		                </div>
		                <div class="col-md-8">
			                <RadzenNumeric style="width: 100%;" Name="Price" @bind-Value="employeeDto.Age" />
		                </div>
	                </div>
	                <div class="row">
		                <div class="col-md-4 align-items-center d-flex">
			                <RadzenLabel Text="Gender" />
		                </div>
		                <div class="col-md-8">
			                <RadzenDropDown @bind-Value="employeeDto.Gender" AllowClear="true" Placeholder="Select operation type" Data="@genders" style="width: 100%;" TextProperty="Genger" ValueProperty="Gender" Name="Gender">
			                </RadzenDropDown>
		                </div>
	                </div>
	                <div class="row">
		                <div class="col-md-4 align-items-center d-flex">
			                <RadzenLabel Text="Department" />
		                </div>
		                <div class="col-md-8">
			                <RadzenDropDown @bind-Value="employeeDto.Department" AllowClear="true" Placeholder="Select operation type" Data="@DepartmentService.Departments" style="width: 100%;" TextProperty="Name" ValueProperty="Name" Name="Name">
			                </RadzenDropDown>
		                </div>
	                </div>
	                <div class="row">
		                <div class="col-md-4 align-items-center d-flex">
			                <RadzenLabel Text="Programing Language" />
		                </div>
		                <div class="col-md-8">
			                <RadzenDropDown @bind-Value="employeeDto.ProgramingLanguage" AllowClear="true" Placeholder="Select operation type" Data="@ProgramingService.ProgramingLanguages" style="width: 100%;" TextProperty="Name" ValueProperty="Name" Name="Name">
			                </RadzenDropDown>
		                </div>
	                </div>
                     <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="add_circle_outline" Text="Create" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" Text="Cancel"  style="display: inline-block; margin-left: 10px;" Click="@CancelClick"/>
                        </div>
                    </div>
	            </RadzenFieldset>
            </div>
        </div>
</RadzenTemplateForm>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

	EmployeeDTO employeeDto = new();

	List<char> genders = new List<char> {
		'W', 
		'M'
	};

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await ProgramingService.GetAllAsync();
			await DepartmentService.GetAllAsync();
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
		}
	}

    private void CancelClick()
	{
		Navigation.NavigateTo("/employees");
	}

    async Task SubmitAsync(EmployeeDTO arg)
    {
	    try
	    {
		    var result = await EmployeeService.CreateAsync(employeeDto);
		    Navigation.NavigateTo("/employees");
	    }
	    catch (Exception ex)
	    {
		    ErrorMessage = ex.Message;
	    }
    }
}
